#include "stdafx.h"
#include <stdlib.h>
#include <stdio.h>
#include <cassert>
#include "NCALRPCPacket.h"
#include "ServerStubLibrary_h.h"    // header file generated by MIDL compiler

#if defined(_UNICODE) || defined(UNICODE)
#define CHAR_TYPE wchar_t
#define RPC_STR RPC_WSTR
#define FORMAT_STORE_CHAR _snwprintf_s
#define FORMAT_PRINT wprintf_s
#else
#define CHAR_TYPE char
#define RPC_STR RPC_CSTR
#define FORMAT_STORE_CHAR _snprintf_s
#define FORMAT_PRINT printf_s
#endif

uint32_t RPCSend(IN RPC_BINDING_HANDLE hBinding, PNCALRPC_PACKET_1 pData)
{
    uint32_t ret = 0;
    if (pData)
    {
        ret = 1;
        FORMAT_PRINT(TEXT("RPC Server receive %d\n"), pData->inSize);
    }
    else
    {
        assert(1);
        FORMAT_PRINT(TEXT("RPC Server receive null pointer, should never happen\n"));
    }
    return ret;
}

uint32_t RPCGet(IN RPC_BINDING_HANDLE hBinding, PNCALRPC_PACKET_2 pData)
{
    uint32_t ret = 0;
    if (pData)
    {
        ret = 1;
        pData->outSize = 13579;
        FORMAT_PRINT(TEXT("RPC Server feedback %d\n"), pData->outSize);
    }
    else
    {
        assert(1);
        FORMAT_PRINT(TEXT("RPC Server receive null pointer, should never happen\n"));
    }
    return ret;
}

void Shutdown(IN RPC_BINDING_HANDLE hBinding)
{
    RPC_STATUS status;

    FORMAT_PRINT(TEXT("Calling RpcMgmtStopServerListening\n"));
    status = RpcMgmtStopServerListening(NULL);
    FORMAT_PRINT(TEXT("RpcMgmtStopServerListening returned: 0x%x\n"), status);
    if (status) {
       exit(status);
    }

    FORMAT_PRINT(TEXT("Calling RpcServerUnregisterIf\n"));
    status = RpcServerUnregisterIf(NULL, NULL, FALSE);
    FORMAT_PRINT(TEXT("RpcServerUnregisterIf returned 0x%x\n"), status);
    if (status) {
       exit(status);
    }
}
