// Server.cpp : Defines the entry point for the console application.
//
#include "stdafx.h"
#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include "ServerStubLibrary_h.h" // header file generated by MIDL compiler
#include "string.h"

#if defined(_UNICODE) || defined(UNICODE)
#define CHAR_TYPE wchar_t
#define RPC_STR RPC_WSTR
#define FORMAT_STORE_CHAR _snwprintf_s
#define FORMAT_PRINT wprintf_s
#else
#define CHAR_TYPE char
#define RPC_STR RPC_CSTR
#define FORMAT_STORE_CHAR _snprintf_s
#define FORMAT_PRINT printf_s
#endif


int __cdecl wmain(int argc, CHAR_TYPE **ppArgv)
//int __cdecl main(int argc, char **ppArgv)
{
    RPC_STATUS status;
    CHAR_TYPE* pszProtocolSequence = TEXT("NCALRPC");
    CHAR_TYPE szEndpoint[MAX_PATH];
    unsigned int cMinCalls = 1;
    unsigned int cMaxCalls = 20;
    unsigned int fDontWait = FALSE;
    FORMAT_STORE_CHAR(szEndpoint, (unsigned)_countof(szEndpoint), _TRUNCATE, TEXT("NCALRPCServer%d"), GetCurrentProcessId());

    status = RpcServerUseProtseqEp(
        (RPC_STR)pszProtocolSequence,
        cMaxCalls,
        (RPC_STR)szEndpoint,
        NULL);  // Security descriptor
    FORMAT_PRINT(TEXT("RpcServerUseProtseqEp returned 0x%x\n"), status);
    FORMAT_PRINT(TEXT("RPC Server: %s\n"), szEndpoint);
    if (status) {
        exit(status);
    }

    // Using Negotiate as security provider.
    status = RpcServerRegisterAuthInfo(NULL, RPC_C_AUTHN_WINNT, NULL, NULL);

    FORMAT_PRINT(TEXT("RpcServerRegisterAuthInfo returned 0x%x\n"), status);
    if (status) {
        exit(status);
    }

    status = RpcServerRegisterIfEx(NCALRPCInterface_v1_0_s_ifspec, NULL, NULL, 0, RPC_C_LISTEN_MAX_CALLS_DEFAULT, NULL);

    FORMAT_PRINT(TEXT("RpcServerRegisterIfEx returned 0x%x\n"), status);

    if (status) {
        exit(status);
    }

    FORMAT_PRINT(TEXT("Calling RpcServerListen\n"));
    status = RpcServerListen(cMinCalls,
        cMaxCalls,
        fDontWait);
    FORMAT_PRINT(TEXT("RpcServerListen returned: 0x%x\n"), status);
    if (status) {
        exit(status);
    }

    if (fDontWait) {
        FORMAT_PRINT(TEXT("Calling RpcMgmtWaitServerListen\n"));
        status = RpcMgmtWaitServerListen();  // wait operation
        FORMAT_PRINT(TEXT("RpcMgmtWaitServerListen returned: 0x%x\n"), status);
        if (status) {
            exit(status);
        }
    }

    return 0;
}

/*********************************************************************/
/*                MIDL allocate and free                             */
/*********************************************************************/

void __RPC_FAR * __RPC_USER midl_user_allocate(size_t len)
{
    return(malloc(len));
}

void __RPC_USER midl_user_free(void __RPC_FAR * ptr)
{
    free(ptr);
}

